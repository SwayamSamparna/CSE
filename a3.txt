1. Write the SQL Expressions for the following queries using suitable SQL operators .

a) Display the Course_ids, Titles and Credits of course that are offered in any of the
departments namely: Physics, Music, Finance and Biology.

SELECT Sub_Code, Title, Credits from Course where Department in ('Physics', 'Music', 'Finance', 'Biology');

b) Display records of the instructors whose name starts with “K” and who get salary more
than 65000.

SELECT * from Faculty_Info where Name like 'K%' and Salary > 65000;

c) Display name, department, gross salary and net salary of instructors with 105% DA, 20%
HRA, 30% IT. (gross salary = salary + DA + HRA, net salary = gross salary – IT).

SELECT Name, Department, (Salary + (Salary * 1.05) + (Salary * 20)) AS Gross_Salary, ((Salary + (Salary * 1.05) + (Salary * 0.20)) - (Salary * 0.30)) AS Net_Salary from Faculty_Info;

d) Display records of the Instructors with salary range 60000 to 80000.

SELECT * from Faculty_Info where Salary between 60000 and 80000;

e) Display the records of the instructors having the second letter in their name as ‘r’.

SELECT * from Faculty_Info where Name like '_r%';

f) Display the names of the instructors of Comp.Sci. Department in the descending order of
their salary.

SELECT Name from Faculty_Info where Department = 'Comp. Sci.' order by Salary DESC;

g) Update all records of Instructor table with a salary hike of 15%.

UPDATE Faculty_Info SET Salary = Salary * 1.15;
SELECT * FROM Faculty_Info;

h) Update the records with a salary hike of 3% for Comp.Sci. Dept instructors having salary
less than 70000.

UPDATE Faculty_Info SET Salary = Salary * 1.03 WHERE Department = 'Comp. Sci.' and Salary < 70000;
SELECT * FROM Faculty_Info;

i) Display the annual salary of each instructor.

SELECT Name, Salary * 12 as Annual_Salary from Faculty_Info;

j) Update the title of the course having title 'Game Design' to 'Game Theory'.

UPDATE Course SET Title = 'Game Theory' where Title = 'Game Design';
SELECT * from Course;

k) Delete the instructor records of History department.

DELETE from Faculty_Info where Department = 'History';
SELECT * FROM Faculty_Info;

l) Delete the course records of the courses having course_id starting with 'BIO'

DELETE from Course WHERE Sub_Code LIKE 'BIO%';
SELECT * FROM Course;



2. Write the SQL Expressions for the following queries using suitable SQL aggregate
function.
a) Display the Avg. salary of instructors of Physics department.

SELECT AVG(Salary) AS Avg_Salary from Faculty_Info WHERE Department = 'Physics';

b) Display the Dept_ name and Average salary paid to instructor of each department

SELECT Department, AVG(Salary) AS Avg_Salary FROM Faculty_Info group by Department;

c) Display the ID, Name & Department of the instructor drawing the highest salary.

SELECT ID, Name, Department FROM Faculty_Info WHERE Salary = (SELECT MAX(Salary) FROM Faculty_Info);

d) Display the number of instructors available in Comp. Sci. Department.

SELECT count(*) AS Faculty_Count FROM Faculty_Info WHERE Department = 'Comp. Sci.';

e) Display the total credits of all courses offered in Comp.Sci. Department.

SELECT SUM(Credits) AS Total_Credits FROM Course where Department = 'Comp. Sci.';

f) Display the number of instructors and total salary drawn by Physics and Comp.Sci.
departments.

SELECT Department, count(*) as Faculty_Info, SUM(Salary) as Toal_Salary from Faculty_Info where Department IN('Physics', 'Comp. Sci.') group by Department;

g) Display the total credits of Comp.Sci. and Biology departments from course table.

SELECT Department, SUM(Credits) AS Total_Credits from Course where Department in ('Comp. Sci.', 'Biology') group by Department;

h) Display building wise total budget values.

SELECT Builder, SUM(Budget) AS Total_Budget from Department group BY Builder; 

i) Display the number of instructors of each department.

SELECT Department, count(*) AS Faculty_Count from Faculty_Info group by Department;

j) Display the number of instructors of each department sorted in high to low.

SELECT Department, count(*) AS Faculty_Count from Faculty_Info group by Department order by Faculty_Count desc;

k) Display the number of courses offered semester wise.

SELECT Department, count(*) AS Faculty_Count from Faculty_Info group by Department order by Faculty_Count desc;

l) Display the name of departments having number of instructors less than 2;

SELECT Department FROM Faculty_Info group BY Department HAVING COUNT(*) < 2;

m) List the number of instructors of each department having 2 or more than 2 instructors
except Finance department, sorted in high to low order of their number.

SELECT Department, COUNT(*) AS Faculty_Count FROM Faculty_Info where Department <> 'Finance' group BY Department HAVING COUNT(*) >= 2 order by Faculty_Count desc;

n) Display the Dept_name that has paid total salary more than 50000.

SELECT Department FROM Faculty_Info group BY Department HAVING SUM(Salary) > 50000;

o) Display the total budget for the building built by Watson.

SELECT SUM(Budget) AS Total_Budget FROM Department WHERE Builder = 'Watson';

p) Display the highest salary of the instructor of Comp.Sci. Department.

SELECT MAX(Salary) AS Highest_Salary FROM Faculty_Info WHERE Department = 'Comp. Sci.';



3. Write the SQL Expressions for the following queries using suitable SQL scalar function.
a) Display your name with first letter being capital, where the entered name is in lower case.

SELECT INITCAP('swayam samparna') AS Capitalized_Name FROM dual;

b) Display 2nd- 6th characters of your name.

SELECT SUBSTR('swayam samparna', 2, 5) AS Sub_Name FROM dual;

c) Find length of your full university name.

SELECT LENGTH('Institute of Technical Education and Research') as Name_Length FROM dual;

d) Display all the Instructor names with its first letter in upper case.

SELECT INITCAP(Name) FROM Faculty_Info;

e) List the department name of each instructor as a three letter code.

SELECT SUBSTR(Department, 1, 3) AS Dept_Code FROM Faculty_Info;

f) Display the month of the joining of each instructor.

SELECT Name, TO_CHAR(date_of_join, 'Month') AS Month_Joined FROM Faculty_Info;

g) Display the date of joining of each instructor in dd/mm/yy format.

SELECT Name, TO_CHAR(date_of_join, 'DD/MM/YY') AS Join_Date FROM Faculty_Info;

h) Display the experience of each instructor in terms of months.

SELECT Name, MONTHS_BETWEEN(SYSDATE, date_of_join) AS Experience_Months from Faculty_Info;

i) Display the experience of each instructor in term of years and months.

SELECT Name, TRUNC(MONTHS_BETWEEN(SYSDATE, date_of_join)/12) || ' Years and ' || TRUNC(MOD(MONTHS_BETWEEN(SYSDATE, date_of_join), 12)) || ' months' AS Experience FROM Faculty_Info;

j) Display the day of joining of each instructor.

SELECT Name, TO_CHAR(date_of_join, 'Day') as Joining_Day from Faculty_Info;

k) Display the date corresponding to 15 days after today's date.

SELECT SYSDATE + 15 AS Future_Date FROM dual;

l) Display the value 94204.27348 truncated up to 2 digits after decimal point.

SELECT TRUNC(94295.27348, 2) AS Truncated_Value FROM dual;

m) Display the value of the expression 5 + 89

SELECT 5 + 89 AS Result FROM dual;

n) Find out the square root of 6464312.

SELECT SQRT(6464312) AS Root_Value FROM dual;

o) Display the string “HELLO ITER” in lower case with a column heading lower case.

SELECT LOWER('HELLO ITER') AS lower_case from dual;
